// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model User {
  id               String              @id @default(cuid())
  username         String?             @unique
  name             String?
  email            String?             @unique
  emailVerified    DateTime?           @map("email_verified")
  image            String?
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  admin            Boolean             @default(false)
  accounts         Account[]
  sessions         Session[]
  submissions      Submission[]
  bookmarks        Bookmark[]
  assessments      UserOnAssessment[]
  ownedAssessments OwnerOnAssessment[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Bookmark {
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String   @map("task_id")

  @@id([taskId, userId])
  @@map("bookmark")
}

enum StatementType {
  PDF
  MARKDOWN
}

enum TaskType {
  NORMAL
  COMMUNICATION
  OUTPUT_ONLY
}

model Task {
  id               String             @id
  title            String             @db.Text
  fullScore        Int                @map("full_score")
  private          Boolean            @default(false)
  type             TaskType           @default(NORMAL)
  statement        StatementType      @default(PDF)
  tags             Tag[]
  bookmarks        Bookmark[]
  submissions      Submission[]
  taskOnAssessment TaskOnAssessment[]
  category         Category?          @relation(fields: [categoryId], references: [id])
  categoryId       String?            @map("category_id")

  @@index([id])
  @@map("task")
}

model Category {
  id               String     @id
  name             String
  childCategory    Category[] @relation("CategoryRelations")
  parentCategory   Category?  @relation("CategoryRelations", references: [id], fields: [parentCategoryId])
  tasks            Task[]
  parentCategoryId String?    @map("parent_category_id")

  @@map("category")
}

model Submission {
  id           Int         @id @default(autoincrement())
  taskId       String      @map("task_id")
  status       String      @default("In Queue")
  submittedAt  DateTime    @default(now()) @map("submitted_at")
  time         Int         @default(0)
  memory       Int         @default(0)
  code         Bytes
  score        Int         @default(0)
  groups       Json        @default("[]")
  language     String
  private      Boolean     @default(false)
  userId       String?     @map("user_id")
  assessmentId String?     @map("assessment_id")
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  assessment   Assessment? @relation(fields: [assessmentId], references: [id], onDelete: SetNull)
  task         Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([id])
  @@map("submission")
}

model Assessment {
  id          String              @id
  name        String              @unique
  archived    Boolean             @default(false)
  description String?
  instruction String?
  submissions Submission[]
  tasks       TaskOnAssessment[]
  users       UserOnAssessment[]
  owners      OwnerOnAssessment[]
  open        DateTime            @default(now())
  close       DateTime

  @@map("assessment")
}

model TaskOnAssessment {
  task         Task       @relation(fields: [taskId], references: [id])
  taskId       String     @map("task_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId String     @map("assessment_id")

  @@id([taskId, assessmentId])
  @@map("task_on_assessment")
}

model UserOnAssessment {
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @map("user_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId String     @map("assessment_id")

  @@id([userId, assessmentId])
  @@map("user_on_assessment")
}

model OwnerOnAssessment {
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @map("user_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId String     @map("assessment_id")

  @@id([userId, assessmentId])
  @@map("owner_on_assessment")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  tasks Task[]

  @@index([id])
  @@map("tag")
}
